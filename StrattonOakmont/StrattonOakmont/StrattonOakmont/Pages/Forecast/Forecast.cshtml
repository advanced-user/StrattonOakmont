@page
@model StrattonOakmont.Pages.Forecast.ForecastModel
@{
}
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

<div style="margin-top: 100px;">
    <h1>Predicting stock prices for @Model.Company.Name</h1>
</div>

<canvas id="myChart" width="400" height="200"></canvas>
<h2 id="verdict"></h2>

<input id="prices" value="@Model.Prices" style="display:none;" />

<script>


let x_vals = []
let y_vals = []

epoch = 10000
let a, b, c, d

const leatningRate = 0.2
const optimizer = tf.train.adam(leatningRate)

set()

async function set() {
    const ctx = document.getElementById('myChart').getContext('2d');
    const globalTemps = await setup();

    const myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: globalTemps.curveX,
            datasets: [
                
                {
                    label: 'Predicted price',
                    data: globalTemps.curveY,
                    fill: false,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    borderWidth: 1
                },
                {
                    label: 'Price',
                    data: globalTemps.y_vals,
                    fill: false,
                    borderColor: 'rgba(106, 90, 205, 1)',
                    backgroundColor: 'rgba(106, 90, 205, 0.5)',
                    borderWidth: 1
                }
            ]
        },
        options: {}
    });


    let verdict = forecast(globalTemps.curveX.length);
    let elVerd = document.getElementById("verdict");

    if (verdict === true) {
        elVerd.innerHTML = "Прогноз: стоит купить"
    }
    else {
        elVerd.innerHTML = "Прогноз: стоит продать"
    }
}


async function setup() {
    a = tf.variable(tf.scalar(-0.5))
    b = tf.variable(tf.scalar(0.5))
    c = tf.variable(tf.scalar(-0.3))
    d = tf.variable(tf.scalar(0.4))

    y_vals = JSON.parse(document.getElementById("prices").value);
    //divider = 1;

    for (var i = 0; i < y_vals.length; i++) {
        x_vals.push(i + 1)
        //divider += y_vals[i];
    }
    /*
    divider /= y_vals.length;

    for (var i = 0; i < y_vals.length; i++) {
        y_vals[i] /= divider;
    }*/

    for (var i = 0; i < epoch; i++) {
        fit()
    }

    const curveX = []

    for (let x = 0; x < x_vals.length; x++) {
        curveX.push(x + 1)
    }

    const ys = tf.tidy(() => predict(curveX))
    let curveY = ys.dataSync()
    ys.dispose()

    /*
    for (var i = 0; i < y_vals.length; i++) {
        x_vals.push(i + 1)
        y_vals[i] *= divider;
        curveY[i] *= divider;
    }*/

    return { curveX, curveY, y_vals }
}

function loss(predict, labels) {
    return predict.sub(labels).square().mean()
}

function predict(x) {
    const xs = tf.tensor1d(x)

    const ys = xs.pow(tf.scalar(3)).mul(a)
        .add(xs.square().mul(b))
        .add(xs.mul(c))
        .add(d)
    return ys
}

function fit() {
    tf.tidy(() => {
        if (x_vals.length > 0) {
            const ys = tf.tensor1d(y_vals)
            optimizer.minimize(() => loss(predict(x_vals), ys))
        }
    })
}

function forecast(lenghtX) {
    result = 0;

    const curveX = []

    for (let x = lenghtX; x < lenghtX+4; x++) {
        curveX.push(x)
    }

    const ys = tf.tidy(() => predict(curveX))
    let curveY = ys.dataSync()
    ys.dispose()

    for (let i = 1; i < curveX.length; i++) {
        result += curveY[i] - curveY[i - 1]
        console.log(result)

    }

    console.log(result)

    if (result <= 0) {
        return false;
    } else {
        return true;
    }
}
</script>