#pragma checksum "C:\Users\Admin\Desktop\StrattonOakmont\StrattonOakmont\StrattonOakmont\StrattonOakmont\Pages\Forecast\Forecast.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3bab3bf386d17ad3dcedc40ac5a521ff295d77c1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(StrattonOakmont.Pages.Forecast.Pages_Forecast_Forecast), @"mvc.1.0.razor-page", @"/Pages/Forecast/Forecast.cshtml")]
namespace StrattonOakmont.Pages.Forecast
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\Desktop\StrattonOakmont\StrattonOakmont\StrattonOakmont\StrattonOakmont\Pages\_ViewImports.cshtml"
using StrattonOakmont;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Admin\Desktop\StrattonOakmont\StrattonOakmont\StrattonOakmont\StrattonOakmont\Pages\_ViewImports.cshtml"
using StrattonOakmontModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Admin\Desktop\StrattonOakmont\StrattonOakmont\StrattonOakmont\StrattonOakmont\Pages\_ViewImports.cshtml"
using StrattonOakmontServices;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3bab3bf386d17ad3dcedc40ac5a521ff295d77c1", @"/Pages/Forecast/Forecast.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3d6d88539bee650b7744a0c63e59d348be055273", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Forecast_Forecast : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\r\n\r\n<div style=\"margin-top: 100px;\">\r\n    <h1>Predicting stock prices for ");
#nullable restore
#line 8 "C:\Users\Admin\Desktop\StrattonOakmont\StrattonOakmont\StrattonOakmont\StrattonOakmont\Pages\Forecast\Forecast.cshtml"
                               Write(Model.Company.Name);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h1>\r\n</div>\r\n\r\n<canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\r\n<h2 id=\"verdict\"></h2>\r\n\r\n<input id=\"prices\"");
            BeginWriteAttribute("value", " value=\"", 345, "\"", 366, 1);
#nullable restore
#line 14 "C:\Users\Admin\Desktop\StrattonOakmont\StrattonOakmont\StrattonOakmont\StrattonOakmont\Pages\Forecast\Forecast.cshtml"
WriteAttributeValue("", 353, Model.Prices, 353, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" style=""display:none;"" />

<script>


let x_vals = []
let y_vals = []

epoch = 10000
let a, b, c, d

const leatningRate = 0.2
const optimizer = tf.train.adam(leatningRate)

set()

async function set() {
    const ctx = document.getElementById('myChart').getContext('2d');
    const globalTemps = await setup();

    const myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: globalTemps.curveX,
            datasets: [
                
                {
                    label: 'Predicted price',
                    data: globalTemps.curveY,
                    fill: false,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    borderWidth: 1
                },
                {
                    label: 'Price',
                    data: globalTemps.y_vals,
                    fill: false,
                    borderColor: 'rgba(106, 90, 205, 1)',
       ");
            WriteLiteral(@"             backgroundColor: 'rgba(106, 90, 205, 0.5)',
                    borderWidth: 1
                }
            ]
        },
        options: {}
    });


    let verdict = forecast(globalTemps.curveX.length);
    let elVerd = document.getElementById(""verdict"");

    if (verdict === true) {
        elVerd.innerHTML = ""Прогноз: стоит купить""
    }
    else {
        elVerd.innerHTML = ""Прогноз: стоит продать""
    }
}


async function setup() {
    a = tf.variable(tf.scalar(-0.5))
    b = tf.variable(tf.scalar(0.5))
    c = tf.variable(tf.scalar(-0.3))
    d = tf.variable(tf.scalar(0.4))

    y_vals = JSON.parse(document.getElementById(""prices"").value);
    //divider = 1;

    for (var i = 0; i < y_vals.length; i++) {
        x_vals.push(i + 1)
        //divider += y_vals[i];
    }
    /*
    divider /= y_vals.length;

    for (var i = 0; i < y_vals.length; i++) {
        y_vals[i] /= divider;
    }*/

    for (var i = 0; i < epoch; i++) {
        fit()
    }");
            WriteLiteral(@"

    const curveX = []

    for (let x = 0; x < x_vals.length; x++) {
        curveX.push(x + 1)
    }

    const ys = tf.tidy(() => predict(curveX))
    let curveY = ys.dataSync()
    ys.dispose()

    /*
    for (var i = 0; i < y_vals.length; i++) {
        x_vals.push(i + 1)
        y_vals[i] *= divider;
        curveY[i] *= divider;
    }*/

    return { curveX, curveY, y_vals }
}

function loss(predict, labels) {
    return predict.sub(labels).square().mean()
}

function predict(x) {
    const xs = tf.tensor1d(x)

    const ys = xs.pow(tf.scalar(3)).mul(a)
        .add(xs.square().mul(b))
        .add(xs.mul(c))
        .add(d)
    return ys
}

function fit() {
    tf.tidy(() => {
        if (x_vals.length > 0) {
            const ys = tf.tensor1d(y_vals)
            optimizer.minimize(() => loss(predict(x_vals), ys))
        }
    })
}

function forecast(lenghtX) {
    result = 0;

    const curveX = []

    for (let x = lenghtX; x < lenghtX+4; x++) {
");
            WriteLiteral(@"        curveX.push(x)
    }

    const ys = tf.tidy(() => predict(curveX))
    let curveY = ys.dataSync()
    ys.dispose()

    for (let i = 1; i < curveX.length; i++) {
        result += curveY[i] - curveY[i - 1]
        console.log(result)

    }

    console.log(result)

    if (result <= 0) {
        return false;
    } else {
        return true;
    }
}
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<StrattonOakmont.Pages.Forecast.ForecastModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<StrattonOakmont.Pages.Forecast.ForecastModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<StrattonOakmont.Pages.Forecast.ForecastModel>)PageContext?.ViewData;
        public StrattonOakmont.Pages.Forecast.ForecastModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
